version: '3.9'
services:

  mongo:
    image: mongo:latest
    container_name: mongodb
    restart: always
    volumes:
      - ./mongo/data:/data/db
    networks:
      - gecko_net

  redis:
    image: redis:latest
    container_name: redisdb
    networks:
      - gecko_net

  fastapi_server:
    build:
      context: .
      dockerfile: fastapi_app/Dockerfile
    container_name: fastapi
    environment:
      MONGONET: mongodb
      TOKEN: ${TOKEN}
      REDIS: redisdb
    volumes:
      - ./fastapi_app:/app
    depends_on:
      - mongo
    networks:
      - gecko_net

  nginx:
    build:
      context: .
      dockerfile: nginx/Dockerfile
    container_name: nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - fastapi_server
    networks:
      - gecko_net

  bot:
    build:
      context: .
      dockerfile: bot/Dockerfile
    container_name: tg_bot
    env_file:
      - .env
    environment:
      FASTAPI: nginx
    volumes:
      - ./bot:/app
    depends_on:
      - fastapi_server
      - nginx
    restart: always
    networks:
      - gecko_net

  # psql_server:
  #   image: postgres:alpine3.17
  #   container_name: psql_server
  #   environment:
  #     - POSTGRES_PASSWORD=postgres
  #     - POSTGRES_USER=postgres
  #     - POSTGRES_DB=artifacts
  #     - PGDATA=/var/lib/postgresql/data/pgdata
  #   volumes:
  #     - .:/var/lib/postgresql/data
  #   healthcheck:
  #     test: ["CMD-SHELL", "pg_isready -U postgres -d artifacts"]
  #     interval: 1m30s
  #     timeout: 10s
  #     retries: 3
  #     start_period: 40s
  #   networks:
  #     - gecko_net

  # mlflow:
  #   build:
  #     context: mlflow/
  #     dockerfile: Dockerfile
  #   container_name: mlflow
  #   environment:
  #     PG_USER: postgres
  #     PG_PASSWORD: postgres
  #     PG_HOST: psql_server
  #     PG_DATABASE: artifacts
  #   depends_on:
  #     - psql_server
  #     - fastapi_server
  #   networks:
  #     - gecko_net

networks:
  gecko_net:
    external: true
    name: gecko_net